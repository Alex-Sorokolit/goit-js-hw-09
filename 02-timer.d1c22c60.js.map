{"mappings":"qBACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,WCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,E,EAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,C,ECRX,IAAMgB,EAAO,CACZC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAkD7BG,EAAQ,CAELC,WAAI,KAEMC,UAAR,EAGSC,MAAnB,WAEgE,GAA3DC,KAAKF,SACRG,QAAQC,IAAI,kCADkD,CAK/D,IAAMC,EAAYC,KAAKC,MAEcL,KAAhCF,UAAW,EAChBG,QAAQC,IAAI,sBAGoBF,KAA3BH,WAAaS,aAAY,WAEwC,IAgC/CC,EAAEC,EAAOC,EAASC,EA5BlCC,EAAOC,EAJOR,KAAKC,MAEOF,GAGhCF,QAAQC,IAAIS,GA2BYH,GAAFD,EAzBJI,GAyBMH,MAAOC,EAATF,EAASE,QAASC,EAAlBH,EAAkBG,QAC1CpB,EAAKK,UAAUkB,YAAc,GAAYC,OAATN,EAAM,KAAcM,OAAXL,EAAQ,KAAWK,OAARJ,E,GAzBhD,I,GAKeK,KAAnB,WACCC,cAAchB,KAAKH,YACnBG,KAAKF,UAAW,EAChBG,QAAQC,IAAIF,KAAKH,YACjBI,QAAQC,IAAI,qB,GA4Bd,SAASe,EAAI9C,GACb,OAAO+C,OAAO/C,GAAOgD,SAAS,EAAE,I,CAQhC,SAASP,EAAmBD,GAI3B,MAAO,CAACH,MAHMS,EAAIG,KAAKC,MAAMV,EAAS,MAAyB,OAGhDF,QAFCQ,EAAIG,KAAKC,MAAMV,EAAS,KAAoB,MAEpCD,QADRO,EAAIG,KAAKC,MAAMV,EAAS,IAAc,M,CAnC1BrB,EAAxBC,SAAS+B,iBAAiB,SAAS,WACvC1B,EAAMG,O,IAIsBT,EAAxBI,QAAQ4B,iBAAiB,SAAS,WACtC1B,EAAMmB,M","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/02-timer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","const refs = {\n startBtn: document.querySelector('button[data-action-start]'),\n stopBtn: document.querySelector('button[data-action-stop]'),\n clockFace: document.querySelector('.js-clockface'),\n}\n\n// Реалізація через клас\nclass Timer {\n constructor() { \n  this.intervalId = null;\n  this.isActive = false; \n }\n // метод запуску таймера\n start() {\n  // Якщо інтервал активний то ми виходимо із функції (другу копію не запускаємо)\n  if (this.isActive) {\n   console.log('Інтервал вже був запущений');\n   return;\n  }\n\n  const startTime = Date.now();\n  // якщо інтервал неактивний, ми його активуємо\n  this.isActive = true;\n  console.log('Інтервал запущений');\n\n  // значення intervalId записуємо у параметр об'єкта\n  this.intervalId = setInterval(() => {\n   // оприділяємо поточний час на момент виконання інтервалу(кожну секунду буде інший)\n   const currentTime = Date.now();\n   // рахуємо різницю між стартовим часом і поточним (в даному інтервалі)\n   const deltaTime = currentTime - startTime;\n   // деструктуризуємо deltaTime і виводимо у консоль\n   const time = getTimerComponents(deltaTime);\n   console.log(time);\n   // повертаємо значення на сторінку\n     // updateClockFace(time);\n  }, 1000);\n };\n\n // метод зупинки таймера \n stop() {\n  clearInterval(this.intervalId)\n  this.isActive = false;\n  console.log(this.intervalId);\n  console.log('Інтервал зупинений');\n }\n\n\n\n}\n\n\n// Реалізація через об'єкт\nconst timer = {\n // значення intervalId\n intervalId: null,\n // чи активний інтервал?\n isActive: false,\n\n // метод запуску таймера\n start() {\n  // Якщо інтервал активний то ми виходимо із функції (другу копію не запускаємо)\n  if (this.isActive) {\n   console.log('Інтервал вже був запущений');\n   return;\n  }\n\n  const startTime = Date.now();\n  // якщо інтервал неактивний, ми його активуємо\n  this.isActive = true;\n  console.log('Інтервал запущений');\n\n  // значення intervalId записуємо у параметр об'єкта\n  this.intervalId = setInterval(() => {\n   // оприділяємо поточний час на момент виконання інтервалу(кожну секунду буде інший)\n   const currentTime = Date.now();\n   // рахуємо різницю між стартовим часом і поточним (в даному інтервалі)\n   const deltaTime = currentTime - startTime;\n   // деструктуризуємо deltaTime і виводимо у консоль\n   const time = getTimerComponents(deltaTime);\n   console.log(time);\n   // повертаємо значення на сторінку\n     updateClockFace(time);\n  }, 1000);\n },\n\n\n // метод зупинки таймера \n stop() {\n  clearInterval(this.intervalId)\n  this.isActive = false;\n  console.log(this.intervalId);\n  console.log('Інтервал зупинений');\n }\n};\n\n// присвоюємо подію на клік по кнопці start\nrefs.startBtn.addEventListener('click', () => {\n timer.start();\n})\n\n// присвоюємо подію на клік по кнопці stop\nrefs.stopBtn.addEventListener('click', () => {\n timer.stop();\n} )\n\n// Функція повернення значень таймера на сторінку\nfunction updateClockFace({ hours, minutes, seconds }) {\n refs.clockFace.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\n\n\n\n\n\n\n\n\n\nfunction pad(value) {\nreturn String(value).padStart(2,'0') \n}\n\n// function getPadComponents(time) {\n \n// }\n\n\nfunction getTimerComponents(time) {\n const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\n return {hours, minutes, seconds}\n}"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$84b9dae4df53835d$var$refs","startBtn","document","querySelector","stopBtn","clockFace","$84b9dae4df53835d$var$timer","intervalId","isActive","start","this","console","log","startTime","Date","now","setInterval","param","hours","minutes","seconds","time","$84b9dae4df53835d$var$getTimerComponents","textContent","concat","stop","clearInterval","$84b9dae4df53835d$var$pad","String","padStart","Math","floor","addEventListener"],"version":3,"file":"02-timer.d1c22c60.js.map"}