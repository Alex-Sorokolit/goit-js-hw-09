{"mappings":"AAAA,MAAMA,EAAO,CACZC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAkDf,MAAdG,EAAQ,CAELC,WAAI,KAEMC,UAAR,EAGSC,QAE6C,GAA3DC,KAAKF,SAEe,YADvBG,QAAQC,IAAI,8BAIb,MAAMC,EAAYC,KAAKC,MAEcL,KAAhCF,UAAW,EAChBG,QAAQC,IAAI,sBAGoBF,KAA3BH,WAAaS,aAAY,KAEwC,MAI/DC,EAAOC,EAJOJ,KAAKC,MAEOF,GAGhCF,QAAQC,IAAIK,GA2Bf,UAAyBE,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC1CrB,EAAKK,UAAUiB,YAAc,GAAGH,KAASC,KAAWC,G,CA1BpBE,CAAZN,EAAK,GACrB,I,EAKeO,OAClBC,cAAcf,KAAKH,YACnBG,KAAKF,UAAW,EAChBG,QAAQC,IAAIF,KAAKH,YACjBI,QAAQC,IAAI,qB,GA4Bd,SAASc,EAAIC,GACb,OAAOC,OAAOD,GAAOE,SAAS,EAAE,I,CAQhC,SAASX,EAAmBD,GAI3B,MAAO,C,MAHOS,EAAII,KAAKC,MAAMd,EAAS,MAAyB,O,QAC/CS,EAAII,KAAKC,MAAMd,EAAS,KAAoB,M,QAC5CS,EAAII,KAAKC,MAAMd,EAAS,IAAc,M,CAnC1BjB,EAAxBC,SAAS+B,iBAAiB,SAAS,KACvC1B,EAAMG,OAAO,IAIeT,EAAxBI,QAAQ4B,iBAAiB,SAAS,KACtC1B,EAAMkB,MAAM","sources":["src/js/02-timer.js"],"sourcesContent":["const refs = {\n startBtn: document.querySelector('button[data-action-start]'),\n stopBtn: document.querySelector('button[data-action-stop]'),\n clockFace: document.querySelector('.js-clockface'),\n}\n\n// Реалізація через клас\nclass Timer {\n constructor() { \n  this.intervalId = null;\n  this.isActive = false; \n }\n // метод запуску таймера\n start() {\n  // Якщо інтервал активний то ми виходимо із функції (другу копію не запускаємо)\n  if (this.isActive) {\n   console.log('Інтервал вже був запущений');\n   return;\n  }\n\n  const startTime = Date.now();\n  // якщо інтервал неактивний, ми його активуємо\n  this.isActive = true;\n  console.log('Інтервал запущений');\n\n  // значення intervalId записуємо у параметр об'єкта\n  this.intervalId = setInterval(() => {\n   // оприділяємо поточний час на момент виконання інтервалу(кожну секунду буде інший)\n   const currentTime = Date.now();\n   // рахуємо різницю між стартовим часом і поточним (в даному інтервалі)\n   const deltaTime = currentTime - startTime;\n   // деструктуризуємо deltaTime і виводимо у консоль\n   const time = getTimerComponents(deltaTime);\n   console.log(time);\n   // повертаємо значення на сторінку\n     // updateClockFace(time);\n  }, 1000);\n };\n\n // метод зупинки таймера \n stop() {\n  clearInterval(this.intervalId)\n  this.isActive = false;\n  console.log(this.intervalId);\n  console.log('Інтервал зупинений');\n }\n\n\n\n}\n\n\n// Реалізація через об'єкт\nconst timer = {\n // значення intervalId\n intervalId: null,\n // чи активний інтервал?\n isActive: false,\n\n // метод запуску таймера\n start() {\n  // Якщо інтервал активний то ми виходимо із функції (другу копію не запускаємо)\n  if (this.isActive) {\n   console.log('Інтервал вже був запущений');\n   return;\n  }\n\n  const startTime = Date.now();\n  // якщо інтервал неактивний, ми його активуємо\n  this.isActive = true;\n  console.log('Інтервал запущений');\n\n  // значення intervalId записуємо у параметр об'єкта\n  this.intervalId = setInterval(() => {\n   // оприділяємо поточний час на момент виконання інтервалу(кожну секунду буде інший)\n   const currentTime = Date.now();\n   // рахуємо різницю між стартовим часом і поточним (в даному інтервалі)\n   const deltaTime = currentTime - startTime;\n   // деструктуризуємо deltaTime і виводимо у консоль\n   const time = getTimerComponents(deltaTime);\n   console.log(time);\n   // повертаємо значення на сторінку\n     updateClockFace(time);\n  }, 1000);\n },\n\n\n // метод зупинки таймера \n stop() {\n  clearInterval(this.intervalId)\n  this.isActive = false;\n  console.log(this.intervalId);\n  console.log('Інтервал зупинений');\n }\n};\n\n// присвоюємо подію на клік по кнопці start\nrefs.startBtn.addEventListener('click', () => {\n timer.start();\n})\n\n// присвоюємо подію на клік по кнопці stop\nrefs.stopBtn.addEventListener('click', () => {\n timer.stop();\n} )\n\n// Функція повернення значень таймера на сторінку\nfunction updateClockFace({ hours, minutes, seconds }) {\n refs.clockFace.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\n\n\n\n\n\n\n\n\n\nfunction pad(value) {\nreturn String(value).padStart(2,'0') \n}\n\n// function getPadComponents(time) {\n \n// }\n\n\nfunction getTimerComponents(time) {\n const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\n return {hours, minutes, seconds}\n}"],"names":["$40d383fb392a7037$var$refs","startBtn","document","querySelector","stopBtn","clockFace","$40d383fb392a7037$var$timer","intervalId","isActive","start","this","console","log","startTime","Date","now","setInterval","time","$40d383fb392a7037$var$getTimerComponents","hours","minutes","seconds","textContent","$40d383fb392a7037$var$updateClockFace","stop","clearInterval","$40d383fb392a7037$var$pad","value","String","padStart","Math","floor","addEventListener"],"version":3,"file":"02-timer.38f6e4e9.js.map"}